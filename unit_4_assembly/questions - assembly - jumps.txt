Q: If $6 is greater than zero, store in $3 the value of ($4 + $5); otherwise if $6 is not greater than zero, store in $3 the value of ($4 - $5). Afterwards, store in $4 the value of ($4 + $6).

(You will need labels, bgtz, add, sub, and j. Do not worry about overflow.)

A:

a = $3
b = $4
c = $5
d = $6
e

if ( d > 0){
	a = b + c; 
}else{
	a = b - c;
}

b = b + d;


li $6, 3
li $3, 4
li $4, 5
li $5, 2
bgtz $6, foo
sub $3, $4, $5
j baz
foo: add $3, $4, $5
baz: add $4, $4, $5

=============

Q: If $7 is less than or equal to zero, jump to address 0x7600FFFC, otherwise jump to address 0x70000000.

(Use blez and jr.)

A:
// doesn't work either

li $7, 1
li $2, 0x70000000
li $3, 0x7600FFFC
blez $7, foo
jr $3
foo: jr $2


The problem I have is that when the statement tests true, I can make it jump to the last label, which then will end the program. However, if the statement tests false, I let the program move to the next instruction and jump to the other address, but because I place the label at the end, it'll still jump to that address at the very end.

is there a way to prevent from reaching the label? is there anyway to prevent program from executing the label at all unless specified, meaning it is only triggered when it is brached to, and not ran because its next in order.

--
ok so Brian explained to me that because the jr jumps to a memory address, assuming that memory address has an instruction inside it, it'll run that instruction instead of the foo label instruction.


=============

Q: Translate this Javascript code into an assembly equivalent.

(Use register 3 for x and register 4 for y.)

	var x = 15;
	if (x > 29) {
		x = 35;
	}
	var y = x * -2;

A:

li $3, 15 # this is variable x
li $4, 0  # this is variable y
li $5, 29
li $6, -2
sub $7, $3, $5 # this result will be used to compare to zero
bltz $7, foo
li $3, 35
foo: mult $3, $6
mfhi $4
mflo $4

