Q: Declare an ascii string "Harry" with the label 'name'. The string should be terminated with a null byte.

A:

.data

name: .asciiz "Harry"



===========

Q: Write a function 'sum4' that takes four operands and returns their sum. Use the alternate register names.
Assume the result will fit in a single register, and don't worry about overflow.
(You will not need the stack or temporary or stored registers.)

A:

# doesn't work yet, still need to figure out how to call functions

# argument $4 = address of the first operand
# argument $5 = address of the second operand
# argument $6 = address of the third operand
# argument $7 = address of the fourth operand
# the result sum will be stored in register 4, $4

sum4:	
	addu $4, $4, $5
	addu $4, $4, $6
	addu $4, $4, $7
	jr $31
	
li $4, 3
li $5, 4
li $6, 5
li $7, 6
jal sum4


===========

Q: Write a function 'strLength' that returns the number of characters in an ASCII string. Assume the string is terminated by a null byte; the null byte does not count as part of the length. The address of the first byte of the string is passed as argument $a0. Return the result in $v0.

in other words, you're given a string of data type .asciiz, where the string ends with a null byte and you have to find the length of this string minus the null byte. The address of the first byte of the string is passed as argument $a0, aka register 4, $4, and you need to return the result in $v0, aka register 2, $2

I'll need to check for the null byte, with bgtz or bltz it should be a loop that adds 1 to a counter until it encounters a null byte, at which it returns the counter to $2

A:

.data 

name: .asciiz "Harry"

strLength:
	#load address of name data on the argument $a0, or $4
	li $2, 0
	la $4, name

strLength_Loop:
	lb, $5, ($4)
	beq, $5, foo
	addiu $2, $2, 1
	addiu $4, $4, 1
	j strLength_Loop


foo: jr $31


===========

Q: Write a function 'foo' that returns the product of argument $a0 and the return value from calling 'bar'. Assume function 'bar' takes no arguments and returns a 32-bit signed number in $v0. Return the low bits of the product in $v1 and the high bits in $v0. 

(Because we call another function, you need to store the return address of 'foo' on the stack and properly manage the stack. Remember that, by convention, a function does not guarantee preserving the values of the argument regisers.)

A:

we are writing one function that depends on the return value of another function, meaning we'll have to invoke a function within another one.

because we are invoking one function within another, we have to keep track of the stack and manage it properly.

remember that for the duration of the subroutine (aka the sub-function called by the main function), the frame pointer stays at the same place. Where as the stack pointer will move up and down as more memory address spaces are added and removed.


foo:
	
	# FUNCTION START:

	# store the frame pointer on the stack
	sw $30, -4($29)

	# store the return address on the stack
	sw $31, -8($29)

	# copy stack pointer to frame pointer
	addiu $30, $29, 0

  # store $s0 on stack so that we can modify it
  sw $s0, -12($fp)

  # adjust stack pointer to reflect that we added 12 bytes of data to the stack
  addiu $sp, $sp, -12

	# FUNCTION BODY:
	
	jal bar
	mult $a0, $v0
	mflo $v1
	mfhi $v0

	# FUNCTION CLEAN-UP AND RETURN

	  # restore $s0
  lw $s0, -12($fp)

	# restore return address from stack
	lw $31, -8($30)

	# restore stack pointer from the frame pointer
	addu $29, $30, 0

	# restore frame pointer from the stack
	lw $30, -4($30)

	# return 
	jr $31


#### need to store $s0 to $a0

here is Brian's answer, instead of using $29, $30 and $31, he used their special name, $sp (sp standing for stack pointer) and $fp (standing for frame pointer) and $ra (ra standing for return address)

foo:
  # FUNCTION START
  # store the previous $fp on the stack
  sw $fp, -4($sp)

  # copy $sp to $fp
  addu $fp, $sp, $zero

  # store the return address on the stack (MIPS stack grows downwards)
  sw $ra, -8($fp)

  # store $s0 on stack so that we can modify it
  sw $s0, -12($fp)

  # adjust stack pointer to reflect that we added 12 bytes of data to the stack
  addiu $sp, $sp, -12


  # FUNCTION BODY
  # save $a0 in $s0
  addu $s0, $a0, $zero

  jal bar
  mult $s0, $v0
  mfhi $v0
  mflo $v1


  # FUNCTION CLEAN-UP AND RETURN

  # restore $s0
  lw $s0, -12($fp)

  # restore return address from stack  
  lw $ra, -8($fp)

  # restore stack pointer
  addiu $sp, $fp, $zero  

  # restore frame pointer
  lw $fp, -4($fp)
  
  # return
  jr $ra