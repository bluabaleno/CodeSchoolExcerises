Q: Declare an ascii string "Harry" with the label 'name'. The string should be terminated with a null byte.

A:

.data

name: .asciiz "Harry"



===========

Q: Write a function 'sum4' that takes four operands and returns their sum. Use the alternate register names.
Assume the result will fit in a single register, and don't worry about overflow.
(You will not need the stack or temporary or stored registers.)

A:

# doesn't work yet, still need to figure out how to call functions

# argument $4 = address of the first operand
# argument $5 = address of the second operand
# argument $6 = address of the third operand
# argument $7 = address of the fourth operand
# the result sum will be stored in register 4, $4

sum4:	
	addu $4, $4, $5
	addu $4, $4, $6
	addu $4, $4, $7
	jr $31
	
li $4, 3
li $5, 4
li $6, 5
li $7, 6
jal sum4


===========

Q: Write a function 'strLength' that returns the number of characters in an ASCII string. Assume the string is terminated by a null byte; the null byte does not count as part of the length. The address of the first byte of the string is passed as argument $a0. Return the result in $v0.

A:

===========

Q: Write a function 'foo' that returns the product of argument $a0 and the return value from calling 'bar'. Assume function 'bar' takes no arguments and returns a 32-bit signed number in $v0. Return the low bits of the product in $v1 and the high bits in $v0. 

(Because we call another function, you need to store the return address of 'foo' on the stack and properly manage the stack. Remember that, by convention, a function does not guarantee preserving the values of the argument regisers.)

A: