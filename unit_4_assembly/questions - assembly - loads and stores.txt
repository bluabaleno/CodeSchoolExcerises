Q: Use sw to write the content of register 5 to address 0x60000000.

A: li $4, 0x60000000
   sw $5, 0($4)


=============

Q: Use sb to write the content of register 5 to address 0x10000000.

(Store the bytes of the register in little-endian order. You will need srl. )

A:  
li $3, 0x10000000
sb $5, ($3)
srl $4, $5, 8
sb $4, 1($3)
srl $4, $5, 16
sb $4, 2($3)
srl $4, $5, 24
sb $4, 3($3)
=============

Q: Use lw to write the 4 bytes at address 0x10000000 to register 5.

A: 
li $4, 0x100000000
lw $2, ($4) 

=============

Q: Use lbu to write the 4 bytes at address 0x60000000 to register 5.

(Assume the bytes are in little-endian order. Remember that lb modifies the whole register. 
You will need sll, or, and multiple registers.)

A:  

li $5, 0xAABBCCDD
li $3, 0x10000000
sb $5, ($3)
srl $4, $5, 8
sb $4, 1($3)
srl $4, $5, 16
sb $4, 2($3)
srl $4, $5, 24
sb $4, 3($3)

# after the code above, the memory address corresponds as following
in ($3)  0x00000000 is 0x000000dd 
in 1($3) 0x00000001 is 0x0000cc00
in 2($3) 0x00000002 is 0x00bb0000
in 3($3) 0x00000003 is 0xaa000000
#

lbu $5, 3($3) # store 0x000000aa in $5

lbu $6, 2($3) # store 0x000000bb in $5
sll $5, $5, 8 # shifts the hex in $5 a byte, 8 bits to the left, giving 0x0000aa00
or $5, $5, $6 # does an or operation on $5,$6 and stores the output in $5 giving 0x0000aabb
 
lbu $6, 1($3)
sll $5, $5, 8
or $5, $5, $6

lbu $6, ($3)
sll $5, $5, 8
or $5, $5, $6
