Q: What is wrong with this code?

	var foo = "hello"
	foo = 48

A: when the variable is first decleared, because we didn't specify a type, the compiler infered that the data type is a string, there for when we try to assign an interger value to foo it'll give us an error


============

Q: What is wrong with this code?

	var foo = -87
	var foo = 48

A: the 

============

Q: Rewrite these declarations using := where allowed (and without changing the code):

	var a string
	var b string = "hello"
	var c int = -22
	var d uint64 = 9
	var e = "yo"
	var f = b

A:

	var a string
	b := "hello"
	c := -22
	var d uint64 = 9
	e := "yo"
	f := b


============

Q: What are the values of these two variables?
	
	var a string
	var b uint16

A:

	"" and zero

============

Q: What is wrong with this code?

	package main

	import "fmt"

	func main() {
		x := 3
		if x > 3 {
			y := 2
		} else {
			y := 4
		}
		fmt.Println(y)
	}

A:

the variable y is being declare twice within the same function scope
============

Q: Add the semi-colons which have been left implicit:

	package main

	import "fmt"

	func main() {
		x := 3;
		var y int;
		if x > 3 {
			y = 2;
		} else {
			y = 4;
		};
		fmt.Println(y);
	};

A:

============

Q: What is the value of x after this code? Why?

	var x int8 = 127
	x += 3            // shorthand for x = x + 3

A: the number range for int8 is -127 to 127, so the number would overflow 3 numbers, 0,
-127, -126

it'll be -126

============

Q: The compiler won't let us add a to b here. Why not? What could we add in the last line to satisfy the compiler?

	a := 5
	var b uint16
	a = a + b

A:

	a := 5
	var b uint16
	a = a + int(b)
============

Q: Write a function 'foo' that takes no arguments and returns the int 3 and the string "hi". In function 'main', call 'foo' and assign its return values to variables a and b.

A:

	package main

	import "fmt"

	func foo()(int, string) {
		return 3, "hi"
	}

	func main(){
		a,b := foo()
		fmt.Println(a,b)
	}
============

Q: Write a function 'foo' that takes a uint32 and an int8 and returns their product as a float32.

A:

package main

import "fmt"

func foo(a uint32, b int8)(product float32){
	product = float32(a) * float32(b)
	return product
}

func main(){
	bar := foo(4,5)
	fmt.Println(bar)
}

============

Q: Declare an array of 19 strings.

A:

var a [19]string

============

Q: Declare an array of 15 arrays of 7 float32's.

A:

var a [15][7]float32

============

Q: What's wrong with this code?

	a := 3
	var b [a]int

A:

the size of the array must be known at compile time

============

Q: Assign "hi" to the last element of this array of arrays:

	var foo [15][7]string

A:

foo[14][6] = "hi"

============

Q: Which of these array elements comes first in memory?

	var foo [11][3][8]bool
	foo[4][1][3] = true
	foo[4][0][7] = true

A: 

foo[4][0][7]
============

Q: What is the value of x after this code?

	var a [3]int
	a[0] = 7
	a[1] = 3
	a[2] = 5
	b := a
	x := b[2]

A:

5

============

Q: What is the value of x after this code?

	var a [3]int
	a[0] = 7
	a[1] = 3
	b := a
	x := b[2]

A:

0

=============